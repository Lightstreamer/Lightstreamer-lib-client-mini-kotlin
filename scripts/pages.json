[{"name":"BIND_SESSION","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.BIND_SESSION","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/-b-i-n-d_-s-e-s-s-i-o-n/index.html","searchKeys":["BIND_SESSION","BIND_SESSION","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.BIND_SESSION"]},{"name":"COMMAND","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.COMMAND","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/-c-o-m-m-a-n-d/index.html","searchKeys":["COMMAND","COMMAND","com.lightstreamer.kotlin.socket.SubscriptionMode.COMMAND"]},{"name":"CONTROL","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.CONTROL","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/-c-o-n-t-r-o-l/index.html","searchKeys":["CONTROL","CONTROL","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.CONTROL"]},{"name":"CREATE_SESSION","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.CREATE_SESSION","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/-c-r-e-a-t-e_-s-e-s-s-i-o-n/index.html","searchKeys":["CREATE_SESSION","CREATE_SESSION","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.CREATE_SESSION"]},{"name":"DISTINCT","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.DISTINCT","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/-d-i-s-t-i-n-c-t/index.html","searchKeys":["DISTINCT","DISTINCT","com.lightstreamer.kotlin.socket.SubscriptionMode.DISTINCT"]},{"name":"HEARTBEAT","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.HEARTBEAT","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/-h-e-a-r-t-b-e-a-t/index.html","searchKeys":["HEARTBEAT","HEARTBEAT","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.HEARTBEAT"]},{"name":"JSONPatch","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.JSONPatch","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/-j-s-o-n-patch/index.html","searchKeys":["JSONPatch","JSONPatch","com.lightstreamer.kotlin.socket.diff.SupportedDiff.JSONPatch"]},{"name":"MERGE","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.MERGE","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/-m-e-r-g-e/index.html","searchKeys":["MERGE","MERGE","com.lightstreamer.kotlin.socket.SubscriptionMode.MERGE"]},{"name":"MESSAGE","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.MESSAGE","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/-m-e-s-s-a-g-e/index.html","searchKeys":["MESSAGE","MESSAGE","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.MESSAGE"]},{"name":"RAW","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.RAW","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/-r-a-w/index.html","searchKeys":["RAW","RAW","com.lightstreamer.kotlin.socket.SubscriptionMode.RAW"]},{"name":"TLCPDiff","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.TLCPDiff","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/-t-l-c-p-diff/index.html","searchKeys":["TLCPDiff","TLCPDiff","com.lightstreamer.kotlin.socket.diff.SupportedDiff.TLCPDiff"]},{"name":"abstract fun disconnect()","description":"com.lightstreamer.kotlin.socket.LightstreamerSocket.disconnect","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-socket/disconnect.html","searchKeys":["disconnect","abstract fun disconnect()","com.lightstreamer.kotlin.socket.LightstreamerSocket.disconnect"]},{"name":"abstract suspend fun join()","description":"com.lightstreamer.kotlin.socket.LightstreamerSocket.join","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-socket/join.html","searchKeys":["join","abstract suspend fun join()","com.lightstreamer.kotlin.socket.LightstreamerSocket.join"]},{"name":"abstract suspend fun send(message: LightstreamerClientMessage)","description":"com.lightstreamer.kotlin.socket.LightstreamerSocket.send","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-socket/send.html","searchKeys":["send","abstract suspend fun send(message: LightstreamerClientMessage)","com.lightstreamer.kotlin.socket.LightstreamerSocket.send"]},{"name":"abstract val fieldCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOkServerMessage.fieldCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok-server-message/field-count.html","searchKeys":["fieldCount","abstract val fieldCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOkServerMessage.fieldCount"]},{"name":"abstract val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/id.html","searchKeys":["id","abstract val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.id"]},{"name":"abstract val itemCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOkServerMessage.itemCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok-server-message/item-count.html","searchKeys":["itemCount","abstract val itemCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOkServerMessage.itemCount"]},{"name":"abstract val prog: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageResultServerMessage.prog","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-result-server-message/prog.html","searchKeys":["prog","abstract val prog: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageResultServerMessage.prog"]},{"name":"abstract val requestId: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestServerMessage.requestId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-server-message/request-id.html","searchKeys":["requestId","abstract val requestId: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestServerMessage.requestId"]},{"name":"abstract val sequence: String?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageResultServerMessage.sequence","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-result-server-message/sequence.html","searchKeys":["sequence","abstract val sequence: String?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageResultServerMessage.sequence"]},{"name":"abstract val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionServerMessage.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-server-message/subscription-id.html","searchKeys":["subscriptionId","abstract val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionServerMessage.subscriptionId"]},{"name":"class ConnectionError(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.ConnectionError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-connection-error/index.html","searchKeys":["ConnectionError","class ConnectionError(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","com.lightstreamer.kotlin.socket.LightstreamerServerException.ConnectionError"]},{"name":"class End(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.End","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-end/index.html","searchKeys":["End","class End(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","com.lightstreamer.kotlin.socket.LightstreamerServerException.End"]},{"name":"class Error(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.Error","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-error/index.html","searchKeys":["Error","class Error(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","com.lightstreamer.kotlin.socket.LightstreamerServerException.Error"]},{"name":"class LightstreamerTlcpSocket : LightstreamerSocket, ReceiveChannel<LightstreamerServerMessage> ","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/index.html","searchKeys":["LightstreamerTlcpSocket","class LightstreamerTlcpSocket : LightstreamerSocket, ReceiveChannel<LightstreamerServerMessage> ","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket"]},{"name":"class RequestError(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.RequestError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-request-error/index.html","searchKeys":["RequestError","class RequestError(val code: Int, val description: String, cause: Throwable? = null) : LightstreamerServerException","com.lightstreamer.kotlin.socket.LightstreamerServerException.RequestError"]},{"name":"class Update(updateMap: Map<String, String?>) : LightstreamerSubscriptionMessage, Map<String, String?> ","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-update/index.html","searchKeys":["Update","class Update(updateMap: Map<String, String?>) : LightstreamerSubscriptionMessage, Map<String, String?> ","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update"]},{"name":"constructor(adapterSetName: String, userCredential: UsernamePassword? = null, keepAlive: Duration? = null, inactivity: Duration? = null, polling: Duration? = null, supportedDiffs: Set<SupportedDiff> = emptySet(), reduceHead: Boolean = false, ttl: LightstreamerClientMessage.CreateSession.TTL = TTL.UNKNOWN, sendSync: Boolean = true)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.CreateSession","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-create-session.html","searchKeys":["CreateSession","constructor(adapterSetName: String, userCredential: UsernamePassword? = null, keepAlive: Duration? = null, inactivity: Duration? = null, polling: Duration? = null, supportedDiffs: Set<SupportedDiff> = emptySet(), reduceHead: Boolean = false, ttl: LightstreamerClientMessage.CreateSession.TTL = TTL.UNKNOWN, sendSync: Boolean = true)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.CreateSession"]},{"name":"constructor(bandwidth: Float?)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Constraint.Constraint","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-constraint/-constraint.html","searchKeys":["Constraint","constructor(bandwidth: Float?)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Constraint.Constraint"]},{"name":"constructor(causeCode: Int? = null, causeMessage: String? = null, closeSocket: Boolean = false)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.Destroy","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-destroy/-destroy.html","searchKeys":["Destroy","constructor(causeCode: Int? = null, causeMessage: String? = null, closeSocket: Boolean = false)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.Destroy"]},{"name":"constructor(clientIp: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClientIp.ClientIp","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-client-ip/-client-ip.html","searchKeys":["ClientIp","constructor(clientIp: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClientIp.ClientIp"]},{"name":"constructor(code: Int, description: String, cause: Throwable? = null)","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.ConnectionError.ConnectionError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-connection-error/-connection-error.html","searchKeys":["ConnectionError","constructor(code: Int, description: String, cause: Throwable? = null)","com.lightstreamer.kotlin.socket.LightstreamerServerException.ConnectionError.ConnectionError"]},{"name":"constructor(code: Int, description: String, cause: Throwable? = null)","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.End.End","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-end/-end.html","searchKeys":["End","constructor(code: Int, description: String, cause: Throwable? = null)","com.lightstreamer.kotlin.socket.LightstreamerServerException.End.End"]},{"name":"constructor(code: Int, description: String, cause: Throwable? = null)","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.Error.Error","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-error/-error.html","searchKeys":["Error","constructor(code: Int, description: String, cause: Throwable? = null)","com.lightstreamer.kotlin.socket.LightstreamerServerException.Error.Error"]},{"name":"constructor(code: Int, description: String, cause: Throwable? = null)","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.RequestError.RequestError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/-request-error/-request-error.html","searchKeys":["RequestError","constructor(code: Int, description: String, cause: Throwable? = null)","com.lightstreamer.kotlin.socket.LightstreamerServerException.RequestError.RequestError"]},{"name":"constructor(code: Int, message: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail.Fail","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/-fail/-fail.html","searchKeys":["Fail","constructor(code: Int, message: String)","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail.Fail"]},{"name":"constructor(code: Int, message: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError.ConnectionError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-error/-connection-error.html","searchKeys":["ConnectionError","constructor(code: Int, message: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError.ConnectionError"]},{"name":"constructor(code: Int, message: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End.End","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end/-end.html","searchKeys":["End","constructor(code: Int, message: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End.End"]},{"name":"constructor(code: Int, message: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error.Error","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-error/-error.html","searchKeys":["Error","constructor(code: Int, message: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error.Error"]},{"name":"constructor(content: String?)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Text.Text","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-text/-text.html","searchKeys":["Text","constructor(content: String?)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Text.Text"]},{"name":"constructor(count: UShort)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Unchanged.Unchanged","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-unchanged/-unchanged.html","searchKeys":["Unchanged","constructor(count: UShort)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Unchanged.Unchanged"]},{"name":"constructor(diffFormat: SupportedDiff, diff: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch.Patch","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-patch/-patch.html","searchKeys":["Patch","constructor(diffFormat: SupportedDiff, diff: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch.Patch"]},{"name":"constructor(expectedDelay: Duration)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Loop.Loop","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-loop/-loop.html","searchKeys":["Loop","constructor(expectedDelay: Duration)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Loop.Loop"]},{"name":"constructor(host: String, port: UShort, secureConnection: Boolean)","description":"com.lightstreamer.kotlin.socket.LightstreamerServerAddress.LightstreamerServerAddress","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-address/-lightstreamer-server-address.html","searchKeys":["LightstreamerServerAddress","constructor(host: String, port: UShort, secureConnection: Boolean)","com.lightstreamer.kotlin.socket.LightstreamerServerAddress.LightstreamerServerAddress"]},{"name":"constructor(item: Int, overflowSize: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow.Overflow","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-overflow/-overflow.html","searchKeys":["Overflow","constructor(item: Int, overflowSize: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow.Overflow"]},{"name":"constructor(itemCount: UShort, fieldCount: UShort, keyFieldPos: UShort? = null, commandFieldPos: UShort? = null)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.SubscriptionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-subscription-ok/-subscription-ok.html","searchKeys":["SubscriptionOk","constructor(itemCount: UShort, fieldCount: UShort, keyFieldPos: UShort? = null, commandFieldPos: UShort? = null)","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.SubscriptionOk"]},{"name":"constructor(itemId: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.ClearSnapshot.ClearSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-clear-snapshot/-clear-snapshot.html","searchKeys":["ClearSnapshot","constructor(itemId: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.ClearSnapshot.ClearSnapshot"]},{"name":"constructor(itemId: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.EndOfSnapshot.EndOfSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-end-of-snapshot/-end-of-snapshot.html","searchKeys":["EndOfSnapshot","constructor(itemId: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.EndOfSnapshot.EndOfSnapshot"]},{"name":"constructor(key: String, value: CharSequence, requireEncoding: Boolean)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.Parameter","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-parameter/-parameter.html","searchKeys":["Parameter","constructor(key: String, value: CharSequence, requireEncoding: Boolean)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.Parameter"]},{"name":"constructor(maxFrequency: Float?, filtered: Boolean)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration.Configuration","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-configuration/-configuration.html","searchKeys":["Configuration","constructor(maxFrequency: Float?, filtered: Boolean)","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration.Configuration"]},{"name":"constructor(message: String, sequence: String? = null, ack: Boolean = true, outcome: Boolean = true, msgProg: Int? = null)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.Message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/-message.html","searchKeys":["Message","constructor(message: String, sequence: String? = null, ack: Boolean = true, outcome: Boolean = true, msgProg: Int? = null)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.Message"]},{"name":"constructor(millis: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis.Millis","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-millis/-millis.html","searchKeys":["Millis","constructor(millis: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis.Millis"]},{"name":"constructor(progressive: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Progressive.Progressive","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-progressive/-progressive.html","searchKeys":["Progressive","constructor(progressive: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Progressive.Progressive"]},{"name":"constructor(requestId: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestOk.RequestOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-ok/-request-ok.html","searchKeys":["RequestOk","constructor(requestId: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestOk.RequestOk"]},{"name":"constructor(requestId: String, code: Int, message: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.RequestError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-error/-request-error.html","searchKeys":["RequestError","constructor(requestId: String, code: Int, message: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.RequestError"]},{"name":"constructor(response: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Done.Done","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/-done/-done.html","searchKeys":["Done","constructor(response: String)","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Done.Done"]},{"name":"constructor(secondsSinceInitialHeader: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Synchronize.Synchronize","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-synchronize/-synchronize.html","searchKeys":["Synchronize","constructor(secondsSinceInitialHeader: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Synchronize.Synchronize"]},{"name":"constructor(sequence: String?, prog: Int, errorCode: Int, errorMessage: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.MessageFail","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-fail/-message-fail.html","searchKeys":["MessageFail","constructor(sequence: String?, prog: Int, errorCode: Int, errorMessage: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.MessageFail"]},{"name":"constructor(sequence: String?, prog: Int, response: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.MessageDone","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-done/-message-done.html","searchKeys":["MessageDone","constructor(sequence: String?, prog: Int, response: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.MessageDone"]},{"name":"constructor(serverName: String)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ServerName.ServerName","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-server-name/-server-name.html","searchKeys":["ServerName","constructor(serverName: String)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ServerName.ServerName"]},{"name":"constructor(session: String, recoveryFrom: Int? = null, keepAlive: Duration? = null, inactivity: Duration? = null, sendSync: Boolean = true)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.BindSession","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/-bind-session.html","searchKeys":["BindSession","constructor(session: String, recoveryFrom: Int? = null, keepAlive: Duration? = null, inactivity: Duration? = null, sendSync: Boolean = true)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.BindSession"]},{"name":"constructor(sessionId: String, requestLimit: Int, keepAlive: Duration?, controlLink: String?)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.ConnectionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-ok/-connection-ok.html","searchKeys":["ConnectionOk","constructor(sessionId: String, requestLimit: Int, keepAlive: Duration?, controlLink: String?)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.ConnectionOk"]},{"name":"constructor(subscriptionId: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.Unsubscribe","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-unsubscribe/-unsubscribe.html","searchKeys":["Unsubscribe","constructor(subscriptionId: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.Unsubscribe"]},{"name":"constructor(subscriptionId: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.UnsubscriptionOk.UnsubscriptionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-unsubscription-ok/-unsubscription-ok.html","searchKeys":["UnsubscriptionOk","constructor(subscriptionId: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.UnsubscriptionOk.UnsubscriptionOk"]},{"name":"constructor(subscriptionId: Int, dataAdapterName: String, mode: SubscriptionMode, itemGroup: String, itemSchema: List<String>, requestSnapshot: Boolean, ack: Boolean = true)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.Subscribe","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/-subscribe.html","searchKeys":["Subscribe","constructor(subscriptionId: Int, dataAdapterName: String, mode: SubscriptionMode, itemGroup: String, itemSchema: List<String>, requestSnapshot: Boolean, ack: Boolean = true)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.Subscribe"]},{"name":"constructor(subscriptionId: Int, item: Int, overflowSize: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.Overflow","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-overflow/-overflow.html","searchKeys":["Overflow","constructor(subscriptionId: Int, item: Int, overflowSize: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.Overflow"]},{"name":"constructor(subscriptionId: Int, itemCount: UShort, fieldCount: UShort)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.SubscriptionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok/-subscription-ok.html","searchKeys":["SubscriptionOk","constructor(subscriptionId: Int, itemCount: UShort, fieldCount: UShort)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.SubscriptionOk"]},{"name":"constructor(subscriptionId: Int, itemCount: UShort, fieldCount: UShort, keyFieldPos: UShort, commandFieldPos: UShort)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.SubscriptionCommandOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-command-ok/-subscription-command-ok.html","searchKeys":["SubscriptionCommandOk","constructor(subscriptionId: Int, itemCount: UShort, fieldCount: UShort, keyFieldPos: UShort, commandFieldPos: UShort)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.SubscriptionCommandOk"]},{"name":"constructor(subscriptionId: Int, itemId: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot.ClearSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-clear-snapshot/-clear-snapshot.html","searchKeys":["ClearSnapshot","constructor(subscriptionId: Int, itemId: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot.ClearSnapshot"]},{"name":"constructor(subscriptionId: Int, itemId: Int)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot.EndOfSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end-of-snapshot/-end-of-snapshot.html","searchKeys":["EndOfSnapshot","constructor(subscriptionId: Int, itemId: Int)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot.EndOfSnapshot"]},{"name":"constructor(subscriptionId: Int, itemId: Int, values: List<LightstreamerServerMessage.Update.Value>)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Update","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-update.html","searchKeys":["Update","constructor(subscriptionId: Int, itemId: Int, values: List<LightstreamerServerMessage.Update.Value>)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Update"]},{"name":"constructor(subscriptionId: Int, maxFrequency: Float?, filtered: Boolean)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.Configuration","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-configuration/-configuration.html","searchKeys":["Configuration","constructor(subscriptionId: Int, maxFrequency: Float?, filtered: Boolean)","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.Configuration"]},{"name":"constructor(updateMap: Map<String, String?>)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.Update","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-update/-update.html","searchKeys":["Update","constructor(updateMap: Map<String, String?>)","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.Update"]},{"name":"constructor(username: String, password: String)","description":"com.lightstreamer.kotlin.socket.UsernamePassword.UsernamePassword","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-username-password/-username-password.html","searchKeys":["UsernamePassword","constructor(username: String, password: String)","com.lightstreamer.kotlin.socket.UsernamePassword.UsernamePassword"]},{"name":"data class BindSession(val session: String, val recoveryFrom: Int? = null, val keepAlive: Duration? = null, val inactivity: Duration? = null, val sendSync: Boolean = true) : LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/index.html","searchKeys":["BindSession","data class BindSession(val session: String, val recoveryFrom: Int? = null, val keepAlive: Duration? = null, val inactivity: Duration? = null, val sendSync: Boolean = true) : LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession"]},{"name":"data class ClearSnapshot(val itemId: Int) : LightstreamerSubscriptionMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.ClearSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-clear-snapshot/index.html","searchKeys":["ClearSnapshot","data class ClearSnapshot(val itemId: Int) : LightstreamerSubscriptionMessage","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.ClearSnapshot"]},{"name":"data class ClearSnapshot(val subscriptionId: Int, val itemId: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-clear-snapshot/index.html","searchKeys":["ClearSnapshot","data class ClearSnapshot(val subscriptionId: Int, val itemId: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot"]},{"name":"data class ClientIp(val clientIp: String) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClientIp","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-client-ip/index.html","searchKeys":["ClientIp","data class ClientIp(val clientIp: String) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClientIp"]},{"name":"data class Configuration(val maxFrequency: Float?, val filtered: Boolean) : LightstreamerSubscriptionMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-configuration/index.html","searchKeys":["Configuration","data class Configuration(val maxFrequency: Float?, val filtered: Boolean) : LightstreamerSubscriptionMessage","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration"]},{"name":"data class Configuration(val subscriptionId: Int, val maxFrequency: Float?, val filtered: Boolean) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-configuration/index.html","searchKeys":["Configuration","data class Configuration(val subscriptionId: Int, val maxFrequency: Float?, val filtered: Boolean) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration"]},{"name":"data class ConnectionError(val code: Int, val message: String) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-error/index.html","searchKeys":["ConnectionError","data class ConnectionError(val code: Int, val message: String) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError"]},{"name":"data class ConnectionOk(val sessionId: String, val requestLimit: Int, val keepAlive: Duration?, val controlLink: String?) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-ok/index.html","searchKeys":["ConnectionOk","data class ConnectionOk(val sessionId: String, val requestLimit: Int, val keepAlive: Duration?, val controlLink: String?) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk"]},{"name":"data class Constraint(val bandwidth: Float?) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Constraint","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-constraint/index.html","searchKeys":["Constraint","data class Constraint(val bandwidth: Float?) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Constraint"]},{"name":"data class CreateSession(val adapterSetName: String, val userCredential: UsernamePassword? = null, val keepAlive: Duration? = null, val inactivity: Duration? = null, val polling: Duration? = null, val supportedDiffs: Set<SupportedDiff> = emptySet(), val reduceHead: Boolean = false, val ttl: LightstreamerClientMessage.CreateSession.TTL = TTL.UNKNOWN, val sendSync: Boolean = true) : LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/index.html","searchKeys":["CreateSession","data class CreateSession(val adapterSetName: String, val userCredential: UsernamePassword? = null, val keepAlive: Duration? = null, val inactivity: Duration? = null, val polling: Duration? = null, val supportedDiffs: Set<SupportedDiff> = emptySet(), val reduceHead: Boolean = false, val ttl: LightstreamerClientMessage.CreateSession.TTL = TTL.UNKNOWN, val sendSync: Boolean = true) : LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession"]},{"name":"data class Destroy(val causeCode: Int? = null, val causeMessage: String? = null, val closeSocket: Boolean = false) : LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-destroy/index.html","searchKeys":["Destroy","data class Destroy(val causeCode: Int? = null, val causeMessage: String? = null, val closeSocket: Boolean = false) : LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy"]},{"name":"data class Done(val response: String) : LightstreamerMessageResponse","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Done","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/-done/index.html","searchKeys":["Done","data class Done(val response: String) : LightstreamerMessageResponse","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Done"]},{"name":"data class End(val code: Int, val message: String) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end/index.html","searchKeys":["End","data class End(val code: Int, val message: String) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End"]},{"name":"data class EndOfSnapshot(val itemId: Int) : LightstreamerSubscriptionMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.EndOfSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-end-of-snapshot/index.html","searchKeys":["EndOfSnapshot","data class EndOfSnapshot(val itemId: Int) : LightstreamerSubscriptionMessage","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.EndOfSnapshot"]},{"name":"data class EndOfSnapshot(val subscriptionId: Int, val itemId: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end-of-snapshot/index.html","searchKeys":["EndOfSnapshot","data class EndOfSnapshot(val subscriptionId: Int, val itemId: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot"]},{"name":"data class Error(val code: Int, val message: String) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-error/index.html","searchKeys":["Error","data class Error(val code: Int, val message: String) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error"]},{"name":"data class Fail(val code: Int, val message: String) : LightstreamerMessageResponse","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/-fail/index.html","searchKeys":["Fail","data class Fail(val code: Int, val message: String) : LightstreamerMessageResponse","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail"]},{"name":"data class LightstreamerServerAddress(val host: String, val port: UShort, val secureConnection: Boolean)","description":"com.lightstreamer.kotlin.socket.LightstreamerServerAddress","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-address/index.html","searchKeys":["LightstreamerServerAddress","data class LightstreamerServerAddress(val host: String, val port: UShort, val secureConnection: Boolean)","com.lightstreamer.kotlin.socket.LightstreamerServerAddress"]},{"name":"data class Loop(val expectedDelay: Duration) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Loop","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-loop/index.html","searchKeys":["Loop","data class Loop(val expectedDelay: Duration) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Loop"]},{"name":"data class Message(val message: String, val sequence: String? = null, val ack: Boolean = true, val outcome: Boolean = true, val msgProg: Int? = null) : LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/index.html","searchKeys":["Message","data class Message(val message: String, val sequence: String? = null, val ack: Boolean = true, val outcome: Boolean = true, val msgProg: Int? = null) : LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message"]},{"name":"data class MessageDone(val sequence: String?, val prog: Int, val response: String) : LightstreamerServerMessage, LightstreamerServerMessage.MessageResultServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-done/index.html","searchKeys":["MessageDone","data class MessageDone(val sequence: String?, val prog: Int, val response: String) : LightstreamerServerMessage, LightstreamerServerMessage.MessageResultServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone"]},{"name":"data class MessageFail(val sequence: String?, val prog: Int, val errorCode: Int, val errorMessage: String) : LightstreamerServerMessage, LightstreamerServerMessage.MessageResultServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-fail/index.html","searchKeys":["MessageFail","data class MessageFail(val sequence: String?, val prog: Int, val errorCode: Int, val errorMessage: String) : LightstreamerServerMessage, LightstreamerServerMessage.MessageResultServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail"]},{"name":"data class Millis(val millis: Int) : LightstreamerClientMessage.CreateSession.TTL","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-millis/index.html","searchKeys":["Millis","data class Millis(val millis: Int) : LightstreamerClientMessage.CreateSession.TTL","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis"]},{"name":"data class Overflow(val item: Int, val overflowSize: Int) : LightstreamerSubscriptionMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-overflow/index.html","searchKeys":["Overflow","data class Overflow(val item: Int, val overflowSize: Int) : LightstreamerSubscriptionMessage","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow"]},{"name":"data class Overflow(val subscriptionId: Int, val item: Int, val overflowSize: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-overflow/index.html","searchKeys":["Overflow","data class Overflow(val subscriptionId: Int, val item: Int, val overflowSize: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow"]},{"name":"data class Parameter(val key: String, val value: CharSequence, val requireEncoding: Boolean)","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-parameter/index.html","searchKeys":["Parameter","data class Parameter(val key: String, val value: CharSequence, val requireEncoding: Boolean)","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter"]},{"name":"data class Patch(val diffFormat: SupportedDiff, val diff: String) : LightstreamerServerMessage.Update.Value","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-patch/index.html","searchKeys":["Patch","data class Patch(val diffFormat: SupportedDiff, val diff: String) : LightstreamerServerMessage.Update.Value","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch"]},{"name":"data class Progressive(val progressive: Int) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Progressive","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-progressive/index.html","searchKeys":["Progressive","data class Progressive(val progressive: Int) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Progressive"]},{"name":"data class RequestError(val requestId: String, val code: Int, val message: String) : LightstreamerServerMessage, LightstreamerServerMessage.RequestServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-error/index.html","searchKeys":["RequestError","data class RequestError(val requestId: String, val code: Int, val message: String) : LightstreamerServerMessage, LightstreamerServerMessage.RequestServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError"]},{"name":"data class RequestOk(val requestId: String) : LightstreamerServerMessage, LightstreamerServerMessage.RequestServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-ok/index.html","searchKeys":["RequestOk","data class RequestOk(val requestId: String) : LightstreamerServerMessage, LightstreamerServerMessage.RequestServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestOk"]},{"name":"data class ServerName(val serverName: String) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ServerName","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-server-name/index.html","searchKeys":["ServerName","data class ServerName(val serverName: String) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ServerName"]},{"name":"data class Subscribe(val subscriptionId: Int, val dataAdapterName: String, val mode: SubscriptionMode, val itemGroup: String, val itemSchema: List<String>, val requestSnapshot: Boolean, val ack: Boolean = true) : LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/index.html","searchKeys":["Subscribe","data class Subscribe(val subscriptionId: Int, val dataAdapterName: String, val mode: SubscriptionMode, val itemGroup: String, val itemSchema: List<String>, val requestSnapshot: Boolean, val ack: Boolean = true) : LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe"]},{"name":"data class SubscriptionCommandOk(val subscriptionId: Int, val itemCount: UShort, val fieldCount: UShort, val keyFieldPos: UShort, val commandFieldPos: UShort) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionOkServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-command-ok/index.html","searchKeys":["SubscriptionCommandOk","data class SubscriptionCommandOk(val subscriptionId: Int, val itemCount: UShort, val fieldCount: UShort, val keyFieldPos: UShort, val commandFieldPos: UShort) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionOkServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk"]},{"name":"data class SubscriptionOk(val itemCount: UShort, val fieldCount: UShort, val keyFieldPos: UShort? = null, val commandFieldPos: UShort? = null) : LightstreamerSubscriptionMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-subscription-ok/index.html","searchKeys":["SubscriptionOk","data class SubscriptionOk(val itemCount: UShort, val fieldCount: UShort, val keyFieldPos: UShort? = null, val commandFieldPos: UShort? = null) : LightstreamerSubscriptionMessage","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk"]},{"name":"data class SubscriptionOk(val subscriptionId: Int, val itemCount: UShort, val fieldCount: UShort) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionOkServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok/index.html","searchKeys":["SubscriptionOk","data class SubscriptionOk(val subscriptionId: Int, val itemCount: UShort, val fieldCount: UShort) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionOkServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk"]},{"name":"data class Synchronize(val secondsSinceInitialHeader: Int) : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Synchronize","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-synchronize/index.html","searchKeys":["Synchronize","data class Synchronize(val secondsSinceInitialHeader: Int) : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Synchronize"]},{"name":"data class Text(val content: String?) : LightstreamerServerMessage.Update.Value","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Text","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-text/index.html","searchKeys":["Text","data class Text(val content: String?) : LightstreamerServerMessage.Update.Value","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Text"]},{"name":"data class Unchanged(val count: UShort) : LightstreamerServerMessage.Update.Value","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Unchanged","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-unchanged/index.html","searchKeys":["Unchanged","data class Unchanged(val count: UShort) : LightstreamerServerMessage.Update.Value","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Unchanged"]},{"name":"data class Unsubscribe(val subscriptionId: Int) : LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-unsubscribe/index.html","searchKeys":["Unsubscribe","data class Unsubscribe(val subscriptionId: Int) : LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe"]},{"name":"data class UnsubscriptionOk(val subscriptionId: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.UnsubscriptionOk","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-unsubscription-ok/index.html","searchKeys":["UnsubscriptionOk","data class UnsubscriptionOk(val subscriptionId: Int) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.UnsubscriptionOk"]},{"name":"data class Update(val subscriptionId: Int, val itemId: Int, val values: List<LightstreamerServerMessage.Update.Value>) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/index.html","searchKeys":["Update","data class Update(val subscriptionId: Int, val itemId: Int, val values: List<LightstreamerServerMessage.Update.Value>) : LightstreamerServerMessage, LightstreamerServerMessage.SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update"]},{"name":"data class UsernamePassword(val username: String, val password: String)","description":"com.lightstreamer.kotlin.socket.UsernamePassword","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-username-password/index.html","searchKeys":["UsernamePassword","data class UsernamePassword(val username: String, val password: String)","com.lightstreamer.kotlin.socket.UsernamePassword"]},{"name":"data object NoOp : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.NoOp","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-no-op/index.html","searchKeys":["NoOp","data object NoOp : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.NoOp"]},{"name":"data object Probe : LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Probe","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-probe/index.html","searchKeys":["Probe","data object Probe : LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Probe"]},{"name":"enum LightstreamerClientRequestName : Enum<LightstreamerClientRequestName> ","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/index.html","searchKeys":["LightstreamerClientRequestName","enum LightstreamerClientRequestName : Enum<LightstreamerClientRequestName> ","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName"]},{"name":"enum SubscriptionMode : Enum<SubscriptionMode> ","description":"com.lightstreamer.kotlin.socket.SubscriptionMode","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/index.html","searchKeys":["SubscriptionMode","enum SubscriptionMode : Enum<SubscriptionMode> ","com.lightstreamer.kotlin.socket.SubscriptionMode"]},{"name":"enum SupportedDiff : Enum<SupportedDiff> ","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/index.html","searchKeys":["SupportedDiff","enum SupportedDiff : Enum<SupportedDiff> ","com.lightstreamer.kotlin.socket.diff.SupportedDiff"]},{"name":"fun fromCode(code: Char): SupportedDiff","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.Companion.fromCode","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/-companion/from-code.html","searchKeys":["fromCode","fun fromCode(code: Char): SupportedDiff","com.lightstreamer.kotlin.socket.diff.SupportedDiff.Companion.fromCode"]},{"name":"fun patch(source: CharSequence, update: LightstreamerServerMessage.Update.Value.Patch): String","description":"com.lightstreamer.kotlin.socket.diff.TlcpDiffDecoder.patch","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-tlcp-diff-decoder/patch.html","searchKeys":["patch","fun patch(source: CharSequence, update: LightstreamerServerMessage.Update.Value.Patch): String","com.lightstreamer.kotlin.socket.diff.TlcpDiffDecoder.patch"]},{"name":"fun requestIdForSubscription(subscriptionId: Int): String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.Companion.requestIdForSubscription","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/-companion/request-id-for-subscription.html","searchKeys":["requestIdForSubscription","fun requestIdForSubscription(subscriptionId: Int): String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.Companion.requestIdForSubscription"]},{"name":"fun requestIdForSubscription(subscriptionId: Int): String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.Companion.requestIdForSubscription","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-unsubscribe/-companion/request-id-for-subscription.html","searchKeys":["requestIdForSubscription","fun requestIdForSubscription(subscriptionId: Int): String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.Companion.requestIdForSubscription"]},{"name":"fun valueOf(value: String): LightstreamerClientRequestName","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.valueOf","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LightstreamerClientRequestName","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.valueOf"]},{"name":"fun valueOf(value: String): SubscriptionMode","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.valueOf","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SubscriptionMode","com.lightstreamer.kotlin.socket.SubscriptionMode.valueOf"]},{"name":"fun valueOf(value: String): SupportedDiff","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.valueOf","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SupportedDiff","com.lightstreamer.kotlin.socket.diff.SupportedDiff.valueOf"]},{"name":"fun values(): Array<LightstreamerClientRequestName>","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.values","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/values.html","searchKeys":["values","fun values(): Array<LightstreamerClientRequestName>","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.values"]},{"name":"fun values(): Array<SubscriptionMode>","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.values","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/values.html","searchKeys":["values","fun values(): Array<SubscriptionMode>","com.lightstreamer.kotlin.socket.SubscriptionMode.values"]},{"name":"fun values(): Array<SupportedDiff>","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.values","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/values.html","searchKeys":["values","fun values(): Array<SupportedDiff>","com.lightstreamer.kotlin.socket.diff.SupportedDiff.values"]},{"name":"interface LightstreamerSocket : ReceiveChannel<LightstreamerServerMessage> ","description":"com.lightstreamer.kotlin.socket.LightstreamerSocket","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-socket/index.html","searchKeys":["LightstreamerSocket","interface LightstreamerSocket : ReceiveChannel<LightstreamerServerMessage> ","com.lightstreamer.kotlin.socket.LightstreamerSocket"]},{"name":"object Companion","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.Companion","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/-companion/index.html","searchKeys":["Companion","object Companion","com.lightstreamer.kotlin.socket.diff.SupportedDiff.Companion"]},{"name":"object Companion","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.Companion","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/-companion/index.html","searchKeys":["Companion","object Companion","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.Companion"]},{"name":"object Companion","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.Companion","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-unsubscribe/-companion/index.html","searchKeys":["Companion","object Companion","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.Companion"]},{"name":"object Companion : KLogging","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/-companion/index.html","searchKeys":["Companion","object Companion : KLogging","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion"]},{"name":"object Heartbeat : LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Heartbeat","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-heartbeat/index.html","searchKeys":["Heartbeat","object Heartbeat : LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Heartbeat"]},{"name":"object TlcpDiffDecoder","description":"com.lightstreamer.kotlin.socket.diff.TlcpDiffDecoder","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-tlcp-diff-decoder/index.html","searchKeys":["TlcpDiffDecoder","object TlcpDiffDecoder","com.lightstreamer.kotlin.socket.diff.TlcpDiffDecoder"]},{"name":"object UNKNOWN : LightstreamerClientMessage.CreateSession.TTL","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNKNOWN","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-u-n-k-n-o-w-n/index.html","searchKeys":["UNKNOWN","object UNKNOWN : LightstreamerClientMessage.CreateSession.TTL","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNKNOWN"]},{"name":"object UNLIMITED : LightstreamerClientMessage.CreateSession.TTL","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNLIMITED","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-u-n-l-i-m-i-t-e-d/index.html","searchKeys":["UNLIMITED","object UNLIMITED : LightstreamerClientMessage.CreateSession.TTL","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNLIMITED"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.equals","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-update/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.equals"]},{"name":"open override fun disconnect()","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.disconnect","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/disconnect.html","searchKeys":["disconnect","open override fun disconnect()","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.disconnect"]},{"name":"open override fun hashCode(): Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.hashCode","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-update/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.hashCode"]},{"name":"open override fun toString(): String","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.toString","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/to-string.html","searchKeys":["toString","open override fun toString(): String","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.toString"]},{"name":"open override fun toString(): String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis.toString","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-millis/to-string.html","searchKeys":["toString","open override fun toString(): String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis.toString"]},{"name":"open override fun toString(): String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNKNOWN.toString","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-u-n-k-n-o-w-n/to-string.html","searchKeys":["toString","open override fun toString(): String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNKNOWN.toString"]},{"name":"open override fun toString(): String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNLIMITED.toString","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-u-n-l-i-m-i-t-e-d/to-string.html","searchKeys":["toString","open override fun toString(): String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.UNLIMITED.toString"]},{"name":"open override fun toString(): String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.toString","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-update/to-string.html","searchKeys":["toString","open override fun toString(): String","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Update.toString"]},{"name":"open override val fieldCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.fieldCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-command-ok/field-count.html","searchKeys":["fieldCount","open override val fieldCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.fieldCount"]},{"name":"open override val fieldCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.fieldCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok/field-count.html","searchKeys":["fieldCount","open override val fieldCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.fieldCount"]},{"name":"open override val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/id.html","searchKeys":["id","open override val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.id"]},{"name":"open override val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/id.html","searchKeys":["id","open override val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.id"]},{"name":"open override val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-destroy/id.html","searchKeys":["id","open override val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.id"]},{"name":"open override val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Heartbeat.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-heartbeat/id.html","searchKeys":["id","open override val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Heartbeat.id"]},{"name":"open override val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/id.html","searchKeys":["id","open override val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.id"]},{"name":"open override val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/id.html","searchKeys":["id","open override val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.id"]},{"name":"open override val id: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.id","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-unsubscribe/id.html","searchKeys":["id","open override val id: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.id"]},{"name":"open override val itemCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.itemCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-command-ok/item-count.html","searchKeys":["itemCount","open override val itemCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.itemCount"]},{"name":"open override val itemCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.itemCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok/item-count.html","searchKeys":["itemCount","open override val itemCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.itemCount"]},{"name":"open override val prog: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.prog","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-done/prog.html","searchKeys":["prog","open override val prog: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.prog"]},{"name":"open override val prog: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.prog","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-fail/prog.html","searchKeys":["prog","open override val prog: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.prog"]},{"name":"open override val requestId: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.requestId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-error/request-id.html","searchKeys":["requestId","open override val requestId: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.requestId"]},{"name":"open override val requestId: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestOk.requestId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-ok/request-id.html","searchKeys":["requestId","open override val requestId: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestOk.requestId"]},{"name":"open override val sequence: String?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.sequence","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-done/sequence.html","searchKeys":["sequence","open override val sequence: String?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.sequence"]},{"name":"open override val sequence: String?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.sequence","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-fail/sequence.html","searchKeys":["sequence","open override val sequence: String?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.sequence"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-clear-snapshot/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot.subscriptionId"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-configuration/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.subscriptionId"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end-of-snapshot/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot.subscriptionId"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-overflow/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.subscriptionId"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-command-ok/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.subscriptionId"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOk.subscriptionId"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.UnsubscriptionOk.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-unsubscription-ok/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.UnsubscriptionOk.subscriptionId"]},{"name":"open override val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/subscription-id.html","searchKeys":["subscriptionId","open override val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.subscriptionId"]},{"name":"open suspend override fun join()","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.join","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/join.html","searchKeys":["join","open suspend override fun join()","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.join"]},{"name":"open suspend override fun send(message: LightstreamerClientMessage)","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.send","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/send.html","searchKeys":["send","open suspend override fun send(message: LightstreamerClientMessage)","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.send"]},{"name":"override fun toString(): String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.toString","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/to-string.html","searchKeys":["toString","override fun toString(): String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.toString"]},{"name":"sealed class LightstreamerClientMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/index.html","searchKeys":["LightstreamerClientMessage","sealed class LightstreamerClientMessage","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage"]},{"name":"sealed class LightstreamerMessageResponse","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/index.html","searchKeys":["LightstreamerMessageResponse","sealed class LightstreamerMessageResponse","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse"]},{"name":"sealed class LightstreamerServerException : IOException","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/index.html","searchKeys":["LightstreamerServerException","sealed class LightstreamerServerException : IOException","com.lightstreamer.kotlin.socket.LightstreamerServerException"]},{"name":"sealed class LightstreamerServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/index.html","searchKeys":["LightstreamerServerMessage","sealed class LightstreamerServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage"]},{"name":"sealed class LightstreamerSubscriptionMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/index.html","searchKeys":["LightstreamerSubscriptionMessage","sealed class LightstreamerSubscriptionMessage","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage"]},{"name":"sealed class TTL","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/index.html","searchKeys":["TTL","sealed class TTL","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL"]},{"name":"sealed class Value","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/index.html","searchKeys":["Value","sealed class Value","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value"]},{"name":"sealed interface MessageResultServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageResultServerMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-result-server-message/index.html","searchKeys":["MessageResultServerMessage","sealed interface MessageResultServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageResultServerMessage"]},{"name":"sealed interface RequestServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestServerMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-server-message/index.html","searchKeys":["RequestServerMessage","sealed interface RequestServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestServerMessage"]},{"name":"sealed interface SubscriptionOkServerMessage : LightstreamerServerMessage.SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOkServerMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-ok-server-message/index.html","searchKeys":["SubscriptionOkServerMessage","sealed interface SubscriptionOkServerMessage : LightstreamerServerMessage.SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionOkServerMessage"]},{"name":"sealed interface SubscriptionServerMessage","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionServerMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-server-message/index.html","searchKeys":["SubscriptionServerMessage","sealed interface SubscriptionServerMessage","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionServerMessage"]},{"name":"suspend fun connect(address: LightstreamerServerAddress, httpClient: HttpClient): LightstreamerSocket","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.connect","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/-companion/connect.html","searchKeys":["connect","suspend fun connect(address: LightstreamerServerAddress, httpClient: HttpClient): LightstreamerSocket","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.connect"]},{"name":"suspend fun sendMessages(address: LightstreamerServerAddress, adapterSetName: String = \"DEFAULT\", userCredential: UsernamePassword? = null, httpClient: HttpClient, messages: Iterable<String>)","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.sendMessages","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/-companion/send-messages.html","searchKeys":["sendMessages","suspend fun sendMessages(address: LightstreamerServerAddress, adapterSetName: String = \"DEFAULT\", userCredential: UsernamePassword? = null, httpClient: HttpClient, messages: Iterable<String>)","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.sendMessages"]},{"name":"val ack: Boolean = true","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.ack","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/ack.html","searchKeys":["ack","val ack: Boolean = true","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.ack"]},{"name":"val ack: Boolean = true","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.ack","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/ack.html","searchKeys":["ack","val ack: Boolean = true","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.ack"]},{"name":"val adapterSetName: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.adapterSetName","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/adapter-set-name.html","searchKeys":["adapterSetName","val adapterSetName: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.adapterSetName"]},{"name":"val bandwidth: Float?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Constraint.bandwidth","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-constraint/bandwidth.html","searchKeys":["bandwidth","val bandwidth: Float?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Constraint.bandwidth"]},{"name":"val causeCode: Int? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.causeCode","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-destroy/cause-code.html","searchKeys":["causeCode","val causeCode: Int? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.causeCode"]},{"name":"val causeMessage: String? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.causeMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-destroy/cause-message.html","searchKeys":["causeMessage","val causeMessage: String? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.causeMessage"]},{"name":"val clientCidCode: String","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.clientCidCode","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/-companion/client-cid-code.html","searchKeys":["clientCidCode","val clientCidCode: String","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.clientCidCode"]},{"name":"val clientIp: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClientIp.clientIp","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-client-ip/client-ip.html","searchKeys":["clientIp","val clientIp: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClientIp.clientIp"]},{"name":"val closeSocket: Boolean = false","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.closeSocket","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-destroy/close-socket.html","searchKeys":["closeSocket","val closeSocket: Boolean = false","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Destroy.closeSocket"]},{"name":"val code: Char","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.code","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/code.html","searchKeys":["code","val code: Char","com.lightstreamer.kotlin.socket.diff.SupportedDiff.code"]},{"name":"val code: Int","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.code","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/code.html","searchKeys":["code","val code: Int","com.lightstreamer.kotlin.socket.LightstreamerServerException.code"]},{"name":"val code: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail.code","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/-fail/code.html","searchKeys":["code","val code: Int","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail.code"]},{"name":"val code: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError.code","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-error/code.html","searchKeys":["code","val code: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError.code"]},{"name":"val code: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End.code","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end/code.html","searchKeys":["code","val code: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End.code"]},{"name":"val code: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error.code","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-error/code.html","searchKeys":["code","val code: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error.code"]},{"name":"val code: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.code","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-error/code.html","searchKeys":["code","val code: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.code"]},{"name":"val commandFieldPos: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.commandFieldPos","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-command-ok/command-field-pos.html","searchKeys":["commandFieldPos","val commandFieldPos: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.commandFieldPos"]},{"name":"val commandFieldPos: UShort? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.commandFieldPos","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-subscription-ok/command-field-pos.html","searchKeys":["commandFieldPos","val commandFieldPos: UShort? = null","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.commandFieldPos"]},{"name":"val content: String?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Text.content","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-text/content.html","searchKeys":["content","val content: String?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Text.content"]},{"name":"val controlLink: String?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.controlLink","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-ok/control-link.html","searchKeys":["controlLink","val controlLink: String?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.controlLink"]},{"name":"val count: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Unchanged.count","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-unchanged/count.html","searchKeys":["count","val count: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Unchanged.count"]},{"name":"val dataAdapterName: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.dataAdapterName","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/data-adapter-name.html","searchKeys":["dataAdapterName","val dataAdapterName: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.dataAdapterName"]},{"name":"val description: String","description":"com.lightstreamer.kotlin.socket.LightstreamerServerException.description","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-exception/description.html","searchKeys":["description","val description: String","com.lightstreamer.kotlin.socket.LightstreamerServerException.description"]},{"name":"val diff: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch.diff","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-patch/diff.html","searchKeys":["diff","val diff: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch.diff"]},{"name":"val diffFormat: SupportedDiff","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch.diffFormat","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/-value/-patch/diff-format.html","searchKeys":["diffFormat","val diffFormat: SupportedDiff","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.Value.Patch.diffFormat"]},{"name":"val entries: EnumEntries<LightstreamerClientRequestName>","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.entries","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-request-name/entries.html","searchKeys":["entries","val entries: EnumEntries<LightstreamerClientRequestName>","com.lightstreamer.kotlin.socket.message.LightstreamerClientRequestName.entries"]},{"name":"val entries: EnumEntries<SubscriptionMode>","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.entries","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/entries.html","searchKeys":["entries","val entries: EnumEntries<SubscriptionMode>","com.lightstreamer.kotlin.socket.SubscriptionMode.entries"]},{"name":"val entries: EnumEntries<SupportedDiff>","description":"com.lightstreamer.kotlin.socket.diff.SupportedDiff.entries","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.diff/-supported-diff/entries.html","searchKeys":["entries","val entries: EnumEntries<SupportedDiff>","com.lightstreamer.kotlin.socket.diff.SupportedDiff.entries"]},{"name":"val errorCode: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.errorCode","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-fail/error-code.html","searchKeys":["errorCode","val errorCode: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.errorCode"]},{"name":"val errorMessage: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.errorMessage","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-fail/error-message.html","searchKeys":["errorMessage","val errorMessage: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageFail.errorMessage"]},{"name":"val expectedDelay: Duration","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Loop.expectedDelay","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-loop/expected-delay.html","searchKeys":["expectedDelay","val expectedDelay: Duration","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Loop.expectedDelay"]},{"name":"val fieldCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.fieldCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-subscription-ok/field-count.html","searchKeys":["fieldCount","val fieldCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.fieldCount"]},{"name":"val filtered: Boolean","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.filtered","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-configuration/filtered.html","searchKeys":["filtered","val filtered: Boolean","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.filtered"]},{"name":"val filtered: Boolean","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration.filtered","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-configuration/filtered.html","searchKeys":["filtered","val filtered: Boolean","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration.filtered"]},{"name":"val host: String","description":"com.lightstreamer.kotlin.socket.LightstreamerServerAddress.host","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-address/host.html","searchKeys":["host","val host: String","com.lightstreamer.kotlin.socket.LightstreamerServerAddress.host"]},{"name":"val inactivity: Duration? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.inactivity","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/inactivity.html","searchKeys":["inactivity","val inactivity: Duration? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.inactivity"]},{"name":"val inactivity: Duration? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.inactivity","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/inactivity.html","searchKeys":["inactivity","val inactivity: Duration? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.inactivity"]},{"name":"val item: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.item","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-overflow/item.html","searchKeys":["item","val item: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.item"]},{"name":"val item: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow.item","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-overflow/item.html","searchKeys":["item","val item: Int","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow.item"]},{"name":"val itemCount: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.itemCount","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-subscription-ok/item-count.html","searchKeys":["itemCount","val itemCount: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.itemCount"]},{"name":"val itemGroup: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.itemGroup","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/item-group.html","searchKeys":["itemGroup","val itemGroup: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.itemGroup"]},{"name":"val itemId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot.itemId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-clear-snapshot/item-id.html","searchKeys":["itemId","val itemId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ClearSnapshot.itemId"]},{"name":"val itemId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot.itemId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end-of-snapshot/item-id.html","searchKeys":["itemId","val itemId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.EndOfSnapshot.itemId"]},{"name":"val itemId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.itemId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/item-id.html","searchKeys":["itemId","val itemId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.itemId"]},{"name":"val itemId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.ClearSnapshot.itemId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-clear-snapshot/item-id.html","searchKeys":["itemId","val itemId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.ClearSnapshot.itemId"]},{"name":"val itemId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.EndOfSnapshot.itemId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-end-of-snapshot/item-id.html","searchKeys":["itemId","val itemId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.EndOfSnapshot.itemId"]},{"name":"val itemSchema: List<String>","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.itemSchema","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/item-schema.html","searchKeys":["itemSchema","val itemSchema: List<String>","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.itemSchema"]},{"name":"val keepAlive: Duration?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.keepAlive","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-ok/keep-alive.html","searchKeys":["keepAlive","val keepAlive: Duration?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.keepAlive"]},{"name":"val keepAlive: Duration? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.keepAlive","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/keep-alive.html","searchKeys":["keepAlive","val keepAlive: Duration? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.keepAlive"]},{"name":"val keepAlive: Duration? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.keepAlive","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/keep-alive.html","searchKeys":["keepAlive","val keepAlive: Duration? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.keepAlive"]},{"name":"val key: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.key","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-parameter/key.html","searchKeys":["key","val key: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.key"]},{"name":"val keyFieldPos: UShort","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.keyFieldPos","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-subscription-command-ok/key-field-pos.html","searchKeys":["keyFieldPos","val keyFieldPos: UShort","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.SubscriptionCommandOk.keyFieldPos"]},{"name":"val keyFieldPos: UShort? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.keyFieldPos","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-subscription-ok/key-field-pos.html","searchKeys":["keyFieldPos","val keyFieldPos: UShort? = null","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.SubscriptionOk.keyFieldPos"]},{"name":"val maxFrequency: Float?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.maxFrequency","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-configuration/max-frequency.html","searchKeys":["maxFrequency","val maxFrequency: Float?","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Configuration.maxFrequency"]},{"name":"val maxFrequency: Float?","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration.maxFrequency","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-configuration/max-frequency.html","searchKeys":["maxFrequency","val maxFrequency: Float?","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Configuration.maxFrequency"]},{"name":"val message: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/message.html","searchKeys":["message","val message: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.message"]},{"name":"val message: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail.message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/-fail/message.html","searchKeys":["message","val message: String","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Fail.message"]},{"name":"val message: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError.message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-error/message.html","searchKeys":["message","val message: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionError.message"]},{"name":"val message: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End.message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-end/message.html","searchKeys":["message","val message: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.End.message"]},{"name":"val message: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error.message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-error/message.html","searchKeys":["message","val message: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Error.message"]},{"name":"val message: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.message","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-request-error/message.html","searchKeys":["message","val message: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.RequestError.message"]},{"name":"val millis: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis.millis","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/-t-t-l/-millis/millis.html","searchKeys":["millis","val millis: Int","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.TTL.Millis.millis"]},{"name":"val mode: SubscriptionMode","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.mode","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/mode.html","searchKeys":["mode","val mode: SubscriptionMode","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.mode"]},{"name":"val msgProg: Int? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.msgProg","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/msg-prog.html","searchKeys":["msgProg","val msgProg: Int? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.msgProg"]},{"name":"val name: LightstreamerClientRequestName","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.name","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/name.html","searchKeys":["name","val name: LightstreamerClientRequestName","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.name"]},{"name":"val outcome: Boolean = true","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.outcome","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/outcome.html","searchKeys":["outcome","val outcome: Boolean = true","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.outcome"]},{"name":"val overflowSize: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.overflowSize","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-overflow/overflow-size.html","searchKeys":["overflowSize","val overflowSize: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Overflow.overflowSize"]},{"name":"val overflowSize: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow.overflowSize","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-subscription-message/-overflow/overflow-size.html","searchKeys":["overflowSize","val overflowSize: Int","com.lightstreamer.kotlin.socket.message.LightstreamerSubscriptionMessage.Overflow.overflowSize"]},{"name":"val password: String","description":"com.lightstreamer.kotlin.socket.UsernamePassword.password","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-username-password/password.html","searchKeys":["password","val password: String","com.lightstreamer.kotlin.socket.UsernamePassword.password"]},{"name":"val polling: Duration? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.polling","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/polling.html","searchKeys":["polling","val polling: Duration? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.polling"]},{"name":"val port: UShort","description":"com.lightstreamer.kotlin.socket.LightstreamerServerAddress.port","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-address/port.html","searchKeys":["port","val port: UShort","com.lightstreamer.kotlin.socket.LightstreamerServerAddress.port"]},{"name":"val progressive: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Progressive.progressive","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-progressive/progressive.html","searchKeys":["progressive","val progressive: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Progressive.progressive"]},{"name":"val recoveryFrom: Int? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.recoveryFrom","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/recovery-from.html","searchKeys":["recoveryFrom","val recoveryFrom: Int? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.recoveryFrom"]},{"name":"val reduceHead: Boolean = false","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.reduceHead","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/reduce-head.html","searchKeys":["reduceHead","val reduceHead: Boolean = false","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.reduceHead"]},{"name":"val requestLimit: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.requestLimit","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-ok/request-limit.html","searchKeys":["requestLimit","val requestLimit: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.requestLimit"]},{"name":"val requestSnapshot: Boolean","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.requestSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/request-snapshot.html","searchKeys":["requestSnapshot","val requestSnapshot: Boolean","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.requestSnapshot"]},{"name":"val requireEncoding: Boolean","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.requireEncoding","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-parameter/require-encoding.html","searchKeys":["requireEncoding","val requireEncoding: Boolean","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.requireEncoding"]},{"name":"val response: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Done.response","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-message-response/-done/response.html","searchKeys":["response","val response: String","com.lightstreamer.kotlin.socket.message.LightstreamerMessageResponse.Done.response"]},{"name":"val response: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.response","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-message-done/response.html","searchKeys":["response","val response: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.MessageDone.response"]},{"name":"val secondsSinceInitialHeader: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Synchronize.secondsSinceInitialHeader","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-synchronize/seconds-since-initial-header.html","searchKeys":["secondsSinceInitialHeader","val secondsSinceInitialHeader: Int","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Synchronize.secondsSinceInitialHeader"]},{"name":"val secureConnection: Boolean","description":"com.lightstreamer.kotlin.socket.LightstreamerServerAddress.secureConnection","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-server-address/secure-connection.html","searchKeys":["secureConnection","val secureConnection: Boolean","com.lightstreamer.kotlin.socket.LightstreamerServerAddress.secureConnection"]},{"name":"val sendSync: Boolean = true","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.sendSync","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/send-sync.html","searchKeys":["sendSync","val sendSync: Boolean = true","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.sendSync"]},{"name":"val sendSync: Boolean = true","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.sendSync","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/send-sync.html","searchKeys":["sendSync","val sendSync: Boolean = true","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.sendSync"]},{"name":"val sequence: String? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.sequence","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-message/sequence.html","searchKeys":["sequence","val sequence: String? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Message.sequence"]},{"name":"val serverName: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ServerName.serverName","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-server-name/server-name.html","searchKeys":["serverName","val serverName: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ServerName.serverName"]},{"name":"val session: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.session","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-bind-session/session.html","searchKeys":["session","val session: String","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.BindSession.session"]},{"name":"val sessionId: String","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.sessionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-connection-ok/session-id.html","searchKeys":["sessionId","val sessionId: String","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.ConnectionOk.sessionId"]},{"name":"val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-subscribe/subscription-id.html","searchKeys":["subscriptionId","val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Subscribe.subscriptionId"]},{"name":"val subscriptionId: Int","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.subscriptionId","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-unsubscribe/subscription-id.html","searchKeys":["subscriptionId","val subscriptionId: Int","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Unsubscribe.subscriptionId"]},{"name":"val supportEndOfSnapshot: Boolean","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.supportEndOfSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/support-end-of-snapshot.html","searchKeys":["supportEndOfSnapshot","val supportEndOfSnapshot: Boolean","com.lightstreamer.kotlin.socket.SubscriptionMode.supportEndOfSnapshot"]},{"name":"val supportSnapshot: Boolean","description":"com.lightstreamer.kotlin.socket.SubscriptionMode.supportSnapshot","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-subscription-mode/support-snapshot.html","searchKeys":["supportSnapshot","val supportSnapshot: Boolean","com.lightstreamer.kotlin.socket.SubscriptionMode.supportSnapshot"]},{"name":"val supportedDiffs: Set<SupportedDiff>","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.supportedDiffs","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/supported-diffs.html","searchKeys":["supportedDiffs","val supportedDiffs: Set<SupportedDiff>","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.supportedDiffs"]},{"name":"val tlcpVersion: String","description":"com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.tlcpVersion","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-lightstreamer-tlcp-socket/-companion/tlcp-version.html","searchKeys":["tlcpVersion","val tlcpVersion: String","com.lightstreamer.kotlin.socket.LightstreamerTlcpSocket.Companion.tlcpVersion"]},{"name":"val ttl: LightstreamerClientMessage.CreateSession.TTL","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.ttl","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/ttl.html","searchKeys":["ttl","val ttl: LightstreamerClientMessage.CreateSession.TTL","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.ttl"]},{"name":"val userCredential: UsernamePassword? = null","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.userCredential","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-create-session/user-credential.html","searchKeys":["userCredential","val userCredential: UsernamePassword? = null","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.CreateSession.userCredential"]},{"name":"val username: String","description":"com.lightstreamer.kotlin.socket.UsernamePassword.username","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket/-username-password/username.html","searchKeys":["username","val username: String","com.lightstreamer.kotlin.socket.UsernamePassword.username"]},{"name":"val value: CharSequence","description":"com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.value","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-client-message/-parameter/value.html","searchKeys":["value","val value: CharSequence","com.lightstreamer.kotlin.socket.message.LightstreamerClientMessage.Parameter.value"]},{"name":"val values: List<LightstreamerServerMessage.Update.Value>","description":"com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.values","location":"ls-kotlin-mini-socket/com.lightstreamer.kotlin.socket.message/-lightstreamer-server-message/-update/values.html","searchKeys":["values","val values: List<LightstreamerServerMessage.Update.Value>","com.lightstreamer.kotlin.socket.message.LightstreamerServerMessage.Update.values"]},{"name":"abstract fun close()","description":"com.lightstreamer.kotlin.client.LightstreamerSession.close","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-session/close.html","searchKeys":["close","abstract fun close()","com.lightstreamer.kotlin.client.LightstreamerSession.close"]},{"name":"abstract fun subscribe(mode: SubscriptionMode, dataAdapterName: String, itemGroup: String, itemFields: LightstreamerSubscription.FieldList, requestSnapshot: Boolean = mode.supportSnapshot): LightstreamerSubscription","description":"com.lightstreamer.kotlin.client.LightstreamerSession.subscribe","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-session/subscribe.html","searchKeys":["subscribe","abstract fun subscribe(mode: SubscriptionMode, dataAdapterName: String, itemGroup: String, itemFields: LightstreamerSubscription.FieldList, requestSnapshot: Boolean = mode.supportSnapshot): LightstreamerSubscription","com.lightstreamer.kotlin.client.LightstreamerSession.subscribe"]},{"name":"abstract suspend fun sendMessage(message: String, sequenceName: String? = null): LightstreamerMessageResponse","description":"com.lightstreamer.kotlin.client.LightstreamerSession.sendMessage","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-session/send-message.html","searchKeys":["sendMessage","abstract suspend fun sendMessage(message: String, sequenceName: String? = null): LightstreamerMessageResponse","com.lightstreamer.kotlin.client.LightstreamerSession.sendMessage"]},{"name":"abstract val dataAdapterName: String","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.dataAdapterName","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/data-adapter-name.html","searchKeys":["dataAdapterName","abstract val dataAdapterName: String","com.lightstreamer.kotlin.client.LightstreamerSubscription.dataAdapterName"]},{"name":"abstract val exitStatus: Deferred<LightstreamerServerException?>","description":"com.lightstreamer.kotlin.client.LightstreamerSession.exitStatus","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-session/exit-status.html","searchKeys":["exitStatus","abstract val exitStatus: Deferred<LightstreamerServerException?>","com.lightstreamer.kotlin.client.LightstreamerSession.exitStatus"]},{"name":"abstract val exitStatus: Deferred<Unit>","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.exitStatus","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/exit-status.html","searchKeys":["exitStatus","abstract val exitStatus: Deferred<Unit>","com.lightstreamer.kotlin.client.LightstreamerSubscription.exitStatus"]},{"name":"abstract val itemFields: LightstreamerSubscription.FieldList","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.itemFields","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/item-fields.html","searchKeys":["itemFields","abstract val itemFields: LightstreamerSubscription.FieldList","com.lightstreamer.kotlin.client.LightstreamerSubscription.itemFields"]},{"name":"abstract val itemGroup: String","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.itemGroup","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/item-group.html","searchKeys":["itemGroup","abstract val itemGroup: String","com.lightstreamer.kotlin.client.LightstreamerSubscription.itemGroup"]},{"name":"abstract val mode: SubscriptionMode","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.mode","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/mode.html","searchKeys":["mode","abstract val mode: SubscriptionMode","com.lightstreamer.kotlin.client.LightstreamerSubscription.mode"]},{"name":"abstract val sessionId: Deferred<String>","description":"com.lightstreamer.kotlin.client.LightstreamerSession.sessionId","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-session/session-id.html","searchKeys":["sessionId","abstract val sessionId: Deferred<String>","com.lightstreamer.kotlin.client.LightstreamerSession.sessionId"]},{"name":"class FieldList(fieldNames: Collection<String>) : AbstractList<String> , Set<String> ","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/index.html","searchKeys":["FieldList","class FieldList(fieldNames: Collection<String>) : AbstractList<String> , Set<String> ","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList"]},{"name":"class LightstreamerCancellationException(val serverException: LightstreamerServerException) : CancellationException","description":"com.lightstreamer.kotlin.client.LightstreamerCancellationException","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-cancellation-exception/index.html","searchKeys":["LightstreamerCancellationException","class LightstreamerCancellationException(val serverException: LightstreamerServerException) : CancellationException","com.lightstreamer.kotlin.client.LightstreamerCancellationException"]},{"name":"class LightstreamerClient(val serverAddress: LightstreamerServerAddress, val adapterSetName: String = \"DEFAULT\", userCredential: UsernamePassword? = null, val keepAlive: Duration? = null, val keepAliveExtra: Duration = 3.seconds, val inactivity: Duration? = null, val forceControlLink: Boolean = false, val createSessionTTL: LightstreamerClientMessage.CreateSession.TTL = LightstreamerClientMessage.CreateSession.TTL.UNKNOWN)","description":"com.lightstreamer.kotlin.client.LightstreamerClient","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/index.html","searchKeys":["LightstreamerClient","class LightstreamerClient(val serverAddress: LightstreamerServerAddress, val adapterSetName: String = \"DEFAULT\", userCredential: UsernamePassword? = null, val keepAlive: Duration? = null, val keepAliveExtra: Duration = 3.seconds, val inactivity: Duration? = null, val forceControlLink: Boolean = false, val createSessionTTL: LightstreamerClientMessage.CreateSession.TTL = LightstreamerClientMessage.CreateSession.TTL.UNKNOWN)","com.lightstreamer.kotlin.client.LightstreamerClient"]},{"name":"constructor(fieldNames: Collection<String>)","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.FieldList","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/-field-list.html","searchKeys":["FieldList","constructor(fieldNames: Collection<String>)","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.FieldList"]},{"name":"constructor(serverAddress: LightstreamerServerAddress, adapterSetName: String = \"DEFAULT\", userCredential: UsernamePassword? = null, keepAlive: Duration? = null, keepAliveExtra: Duration = 3.seconds, inactivity: Duration? = null, forceControlLink: Boolean = false, createSessionTTL: LightstreamerClientMessage.CreateSession.TTL = LightstreamerClientMessage.CreateSession.TTL.UNKNOWN)","description":"com.lightstreamer.kotlin.client.LightstreamerClient.LightstreamerClient","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/-lightstreamer-client.html","searchKeys":["LightstreamerClient","constructor(serverAddress: LightstreamerServerAddress, adapterSetName: String = \"DEFAULT\", userCredential: UsernamePassword? = null, keepAlive: Duration? = null, keepAliveExtra: Duration = 3.seconds, inactivity: Duration? = null, forceControlLink: Boolean = false, createSessionTTL: LightstreamerClientMessage.CreateSession.TTL = LightstreamerClientMessage.CreateSession.TTL.UNKNOWN)","com.lightstreamer.kotlin.client.LightstreamerClient.LightstreamerClient"]},{"name":"constructor(serverException: LightstreamerServerException)","description":"com.lightstreamer.kotlin.client.LightstreamerCancellationException.LightstreamerCancellationException","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-cancellation-exception/-lightstreamer-cancellation-exception.html","searchKeys":["LightstreamerCancellationException","constructor(serverException: LightstreamerServerException)","com.lightstreamer.kotlin.client.LightstreamerCancellationException.LightstreamerCancellationException"]},{"name":"constructor(vararg fields: String)","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.FieldList","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/-field-list.html","searchKeys":["FieldList","constructor(vararg fields: String)","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.FieldList"]},{"name":"fun close()","description":"com.lightstreamer.kotlin.client.LightstreamerClient.close","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/close.html","searchKeys":["close","fun close()","com.lightstreamer.kotlin.client.LightstreamerClient.close"]},{"name":"fun isClosed(): Boolean","description":"com.lightstreamer.kotlin.client.LightstreamerClient.isClosed","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/is-closed.html","searchKeys":["isClosed","fun isClosed(): Boolean","com.lightstreamer.kotlin.client.LightstreamerClient.isClosed"]},{"name":"fun openSession(): LightstreamerSession","description":"com.lightstreamer.kotlin.client.LightstreamerClient.openSession","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/open-session.html","searchKeys":["openSession","fun openSession(): LightstreamerSession","com.lightstreamer.kotlin.client.LightstreamerClient.openSession"]},{"name":"interface LightstreamerSession","description":"com.lightstreamer.kotlin.client.LightstreamerSession","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-session/index.html","searchKeys":["LightstreamerSession","interface LightstreamerSession","com.lightstreamer.kotlin.client.LightstreamerSession"]},{"name":"interface LightstreamerSubscription : CoroutineScope, ReceiveChannel<LightstreamerSubscriptionMessage> ","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/index.html","searchKeys":["LightstreamerSubscription","interface LightstreamerSubscription : CoroutineScope, ReceiveChannel<LightstreamerSubscriptionMessage> ","com.lightstreamer.kotlin.client.LightstreamerSubscription"]},{"name":"open operator override fun contains(element: String): Boolean","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.contains","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/contains.html","searchKeys":["contains","open operator override fun contains(element: String): Boolean","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.contains"]},{"name":"open operator override fun get(index: Int): String","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.get","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/get.html","searchKeys":["get","open operator override fun get(index: Int): String","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.get"]},{"name":"open override fun indexOf(element: String): Int","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.indexOf","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/index-of.html","searchKeys":["indexOf","open override fun indexOf(element: String): Int","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.indexOf"]},{"name":"open override fun spliterator(): Spliterator<String>","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.spliterator","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/spliterator.html","searchKeys":["spliterator","open override fun spliterator(): Spliterator<String>","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.spliterator"]},{"name":"open override fun toString(): String","description":"com.lightstreamer.kotlin.client.LightstreamerClient.toString","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/to-string.html","searchKeys":["toString","open override fun toString(): String","com.lightstreamer.kotlin.client.LightstreamerClient.toString"]},{"name":"open override val size: Int","description":"com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.size","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-subscription/-field-list/size.html","searchKeys":["size","open override val size: Int","com.lightstreamer.kotlin.client.LightstreamerSubscription.FieldList.size"]},{"name":"val adapterSetName: String","description":"com.lightstreamer.kotlin.client.LightstreamerClient.adapterSetName","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/adapter-set-name.html","searchKeys":["adapterSetName","val adapterSetName: String","com.lightstreamer.kotlin.client.LightstreamerClient.adapterSetName"]},{"name":"val createSessionTTL: LightstreamerClientMessage.CreateSession.TTL","description":"com.lightstreamer.kotlin.client.LightstreamerClient.createSessionTTL","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/create-session-t-t-l.html","searchKeys":["createSessionTTL","val createSessionTTL: LightstreamerClientMessage.CreateSession.TTL","com.lightstreamer.kotlin.client.LightstreamerClient.createSessionTTL"]},{"name":"val forceControlLink: Boolean = false","description":"com.lightstreamer.kotlin.client.LightstreamerClient.forceControlLink","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/force-control-link.html","searchKeys":["forceControlLink","val forceControlLink: Boolean = false","com.lightstreamer.kotlin.client.LightstreamerClient.forceControlLink"]},{"name":"val inactivity: Duration? = null","description":"com.lightstreamer.kotlin.client.LightstreamerClient.inactivity","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/inactivity.html","searchKeys":["inactivity","val inactivity: Duration? = null","com.lightstreamer.kotlin.client.LightstreamerClient.inactivity"]},{"name":"val keepAlive: Duration? = null","description":"com.lightstreamer.kotlin.client.LightstreamerClient.keepAlive","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/keep-alive.html","searchKeys":["keepAlive","val keepAlive: Duration? = null","com.lightstreamer.kotlin.client.LightstreamerClient.keepAlive"]},{"name":"val keepAliveExtra: Duration","description":"com.lightstreamer.kotlin.client.LightstreamerClient.keepAliveExtra","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/keep-alive-extra.html","searchKeys":["keepAliveExtra","val keepAliveExtra: Duration","com.lightstreamer.kotlin.client.LightstreamerClient.keepAliveExtra"]},{"name":"val serverAddress: LightstreamerServerAddress","description":"com.lightstreamer.kotlin.client.LightstreamerClient.serverAddress","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-client/server-address.html","searchKeys":["serverAddress","val serverAddress: LightstreamerServerAddress","com.lightstreamer.kotlin.client.LightstreamerClient.serverAddress"]},{"name":"val serverException: LightstreamerServerException","description":"com.lightstreamer.kotlin.client.LightstreamerCancellationException.serverException","location":"ls-kotlin-mini-client/com.lightstreamer.kotlin.client/-lightstreamer-cancellation-exception/server-exception.html","searchKeys":["serverException","val serverException: LightstreamerServerException","com.lightstreamer.kotlin.client.LightstreamerCancellationException.serverException"]}]